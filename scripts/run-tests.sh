set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

echo "üöÄ –ó–∞–ø—É—Å–∫ CI/CD Pipeline –¥–ª—è File Manager"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v docker &> /dev/null; then
        error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if ! command -v python3 &> /dev/null; then
        error "Python 3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤
install_test_dependencies() {
    log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤..."
    
    # Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    pip install -r ./requirements-test.txt
    
    success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

run_backend_tests() {
    log "–ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤ –¥–ª—è backend —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ auth-service..."
    cd backend/authentification_service
    python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
    cd ../..
    
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ data-service..."
    cd backend/data_service
    python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
    cd ../..
    
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ processing-service..."
    cd backend/processing_service
    python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
    cd ../..
    
    success "Backend —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
}

run_frontend_tests() {
    log "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è frontend..."
    
    if [ -f "frontend/test-frontend.sh" ]; then
        chmod +x frontend/test-frontend.sh || true
        ./frontend/test-frontend.sh
    else
        warning "frontend/test-frontend.sh –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ç–µ—Å—Ç—ã"
    fi
    
    success "Frontend —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
}

run_integration_tests() {
    log "–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."

    log "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose -f docker-compose.test.yml up -d

    log "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    sleep 30

    docker-compose -f docker-compose.test.yml ps

    log "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
    python -m pytest tests/integration/ -v
    
    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose -f docker-compose.test.yml down
    
    success "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
}

run_security_scan() {
    log "–ó–∞–ø—É—Å–∫ security —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è..."
    
    if ! command -v trivy &> /dev/null; then
        log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Trivy..."
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
    fi

    log "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã..."
    trivy fs --format json --output trivy-results.json .

    log "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–æ–≤..."
    docker build -t auth-service-test ./backend/authentification_service
    docker build -t data-service-test ./backend/data_service
    docker build -t processing-service-test ./backend/processing_service
    docker build -t frontend-test ./frontend
    
    trivy image --format json --output trivy-images.json auth-service-test data-service-test processing-service-test frontend-test
    
    log "–ó–∞–ø—É—Å–∫ Bandit security linter..."
    pip install bandit
    bandit -r backend/ -f json -o bandit-report.json

    log "–ó–∞–ø—É—Å–∫ Safety check..."
    pip install safety
    safety check --json --output safety-report.json
    
    success "Security —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

build_docker_images() {
    log "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    
    docker build -t auth-service:latest ./backend/authentification_service
    docker build -t data-service:latest ./backend/data_service
    docker build -t processing-service:latest ./backend/processing_service
    docker build -t frontend:latest ./frontend
    
    success "Docker –æ–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã"
}

cleanup() {
    log "–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    
    docker-compose -f docker-compose.test.yml down 2>/dev/null || true
    
    docker rmi auth-service-test data-service-test processing-service-test frontend-test 2>/dev/null || true
    
    rm -f trivy-results.json trivy-images.json bandit-report.json safety-report.json
    
    success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

main() {
    log "–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è CI/CD pipeline"
    
    SKIP_TESTS=false
    SKIP_SECURITY=false
    SKIP_BUILD=false
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --skip-tests)
                SKIP_TESTS=true
                shift
                ;;
            --skip-security)
                SKIP_SECURITY=true
                shift
                ;;
            --skip-build)
                SKIP_BUILD=true
                shift
                ;;
            --help)
                echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
                echo "–û–ø—Ü–∏–∏:"
                echo "  --skip-tests     –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã"
                echo "  --skip-security  –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å security —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
                echo "  --skip-build     –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä–∫—É Docker –æ–±—Ä–∞–∑–æ–≤"
                echo "  --help           –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
                exit 0
                ;;
            *)
                error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
                exit 1
                ;;
        esac
    done
    
    check_dependencies
    install_test_dependencies
    
    if [ "$SKIP_TESTS" = false ]; then
        run_backend_tests
        run_frontend_tests
        run_integration_tests
    else
        warning "–ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"
    fi
    
    if [ "$SKIP_SECURITY" = false ]; then
        run_security_scan
    else
        warning "–ü—Ä–æ–ø—É—Å–∫ security —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
    fi
    
    if [ "$SKIP_BUILD" = false ]; then
        build_docker_images
    else
        warning "–ü—Ä–æ–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–æ–≤"
    fi
    
    success "CI/CD pipeline —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! üéâ"
}

trap cleanup EXIT INT TERM

main "$@"
