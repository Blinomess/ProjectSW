name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:

  backend-tests:
    runs-on: self-hosted

    strategy:
      matrix:
        service: [authentification_service, data_service, processing_service]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/${{ matrix.service }}/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install PostgreSQL on Windows
      run: |
        # –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PostgreSQL —á–µ—Ä–µ–∑ Chocolatey
        try {
          choco install postgresql -y
          Write-Host "‚úÖ PostgreSQL installed via Chocolatey"
        } catch {
          Write-Host "‚ö†Ô∏è Chocolatey failed, trying winget..."
          winget install PostgreSQL.PostgreSQL
          Write-Host "‚úÖ PostgreSQL installed via winget"
        }
        
        # –ù–∞—Ö–æ–¥–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é PostgreSQL
        $postgresPath = Get-ChildItem "C:\Program Files\PostgreSQL" | Select-Object -First 1
        $postgresVersion = $postgresPath.Name
        Write-Host "PostgreSQL version found: $postgresVersion"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º PostgreSQL —Å–ª—É–∂–±—É
        net start "postgresql-x64-$postgresVersion"
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±—ã
        Start-Sleep -Seconds 10

    - name: Setup PostgreSQL database
      run: |
        # –ù–∞—Ö–æ–¥–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é PostgreSQL
        $postgresPath = Get-ChildItem "C:\Program Files\PostgreSQL" | Select-Object -First 1
        $postgresVersion = $postgresPath.Name
        $postgresBinPath = "C:\Program Files\PostgreSQL\$postgresVersion\bin"
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        & "$postgresBinPath\createdb.exe" -U postgres test_db
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        & "$postgresBinPath\psql.exe" -U postgres -d test_db -c "CREATE USER test_user WITH PASSWORD 'test_password';"
        & "$postgresBinPath\psql.exe" -U postgres -d test_db -c "GRANT ALL PRIVILEGES ON DATABASE test_db TO test_user;"

    - name: Install dependencies
      run: |
        cd backend/${{ matrix.service }}
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx

    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
      run: |
        cd backend/${{ matrix.service }}
        pytest tests/ -v --cov=. --cov-report=xml:coverage.xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/${{ matrix.service }}/coverage.xml
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage


  frontend-tests:
    runs-on: self-hosted
           
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run frontend tests
      shell: bash
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π shell
        echo "Current shell: $SHELL"
        echo "Current OS: $(uname -a)"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        if [ -f "frontend/index.html" ]; then echo "‚úÖ index.html exists"; fi
        if [ -f "frontend/upload.html" ]; then echo "‚úÖ upload.html exists"; fi
        if [ -f "frontend/scripts/script.js" ]; then echo "‚úÖ script.js exists"; fi
        if [ -f "frontend/scripts/upload.js" ]; then echo "‚úÖ upload.js exists"; fi
        if [ -f "frontend/scripts/analyze.js" ]; then echo "‚úÖ analyze.js exists"; fi
        if [ -f "frontend/styles/style.css" ]; then echo "‚úÖ style.css exists"; fi
        if [ -f "frontend/styles/uploadstyle.css" ]; then echo "‚úÖ uploadstyle.css exists"; fi
        echo "üéâ Frontend files check completed"


  integration-tests:
    runs-on: self-hosted
    needs: [backend-tests, frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run integration tests
      shell: bash
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã
        echo "Running integration tests..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        if [ -f "tests/integration/test_integration.py" ]; then 
          echo "Integration test file exists" 
        else
          echo "Integration test file not found"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker Compose —Ñ–∞–π–ª
        if [ -f "docker-compose.test.yml" ]; then 
          echo "Docker Compose test file exists" 
        else
          echo "Docker Compose test file not found"
        fi
        
        echo "Integration tests check completed"


  security-scan:
    runs-on: self-hosted
    needs: [backend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Basic security check
      shell: bash
      run: |
        echo "Running basic security checks..."
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ö–∞—Ä–¥–∫–æ–¥ –ø–∞—Ä–æ–ª–µ–π
        if grep -r "password.*=" backend/ --include="*.py" | grep -v "password_hash" | grep -v "test"; then
          echo "Found potential hardcoded passwords"
          exit 1
        else
          echo "No hardcoded passwords found"
        fi

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è env-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        if grep -r "import os" backend/ --include="*.py" > /dev/null; then
          echo "Environment variables in use"
        fi

        echo "Basic security checks passed!"


  build-and-push:
    runs-on: self-hosted
    needs: [integration-tests, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker images locally
      shell: bash
      run: |
        echo "Building Docker images via Git Bash..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
        docker --version
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
        chmod +x k8s/build-images-gitbash.sh
        ./k8s/build-images-gitbash.sh
        
        echo "Docker images built successfully!"


  deploy-staging:
    runs-on: self-hosted
    needs: [build-and-push]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      shell: bash
      run: |
         echo "Deploying to staging environment via Git Bash..."
         chmod +x k8s/deploy-gitbash.sh
         ./k8s/deploy-gitbash.sh
         echo "Staging deploy complete!"


  deploy-production:
    runs-on: self-hosted
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      shell: bash
      run: |
         echo "Deploying to production environment via Git Bash..."
         chmod +x k8s/deploy-gitbash.sh
         ./k8s/deploy-gitbash.sh
         echo "Production deploy complete!"


  notify:
    runs-on: self-hosted
    needs: [deploy-staging, deploy-production]
    if: always()
    continue-on-error: true

    steps:
    - name: Notify on success
      if: needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'
      run: echo "Deployment successful!"

    - name: Notify on failure
      if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
      run: echo "Deployment failed!"
