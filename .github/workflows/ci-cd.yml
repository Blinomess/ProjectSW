name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:

  backend-tests:
    runs-on: [self-hosted, linux]
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        service: [authentification_service, data_service, processing_service]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/${{ matrix.service }}/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd backend/${{ matrix.service }}
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx

    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
      run: |
        cd backend/${{ matrix.service }}
        pytest tests/ -v --cov=. --cov-report=xml:coverage.xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/${{ matrix.service }}/coverage.xml
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage


  frontend-tests:
    runs-on: [self-hosted, linux]
           
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run frontend tests
      run: |
        chmod +x frontend/test-frontend.sh
        ./frontend/test-frontend.sh


  integration-tests:
    runs-on: [self-hosted, linux]
    needs: [backend-tests, frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        pip install requests

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test images
      run: |
        docker build -t auth-service-test ./backend/authentification_service
        docker build -t data-service-test ./backend/data_service
        docker build -t processing-service-test ./backend/processing_service
        docker build -t frontend-test ./frontend

    - name: Start services
      run: docker compose -f docker-compose.test.yml up -d --build

    - name: Wait for services
      run: |
        sleep 30
        docker compose -f docker-compose.test.yml ps

    - name: Run integration tests
      run: |
        cd tests/integration
        python -m pytest test_integration.py -v

    - name: Stop services
      run: docker compose -f docker-compose.test.yml down


  security-scan:
    runs-on: [self-hosted, linux]
    needs: [backend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Basic security check
      run: |
        echo "Running basic security checks..."
        # Проверка на хардкод паролей
        if grep -r "password.*=" backend/ --include="*.py" | grep -v "password_hash" | grep -v "test"; then
          echo "Found potential hardcoded passwords"
          exit 1
        else
          echo "No hardcoded passwords found"
        fi

        # Проверяем что используются env-переменные
        if grep -r "import os" backend/ --include="*.py" > /dev/null; then
          echo "Environment variables in use"
        fi

        echo "Basic security checks passed!"


  build-images:
    runs-on: [self-hosted, linux]
    needs: [integration-tests, security-scan]
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Set repository name to lowercase
      run: |
        echo "REPO_NAME_LOWER=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Build auth-service
      uses: docker/build-push-action@v5
      with:
        context: ./backend/authentification_service
        push: true
        platforms: linux/amd64,linux/arm64
        tags: ${{ secrets.DOCKER_USERNAME }}/auth-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build data-service
      uses: docker/build-push-action@v5
      with:
        context: ./backend/data_service
        push: true
        platforms: linux/amd64,linux/arm64
        tags: ${{ secrets.DOCKER_USERNAME }}/data-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build processing-service
      uses: docker/build-push-action@v5
      with:
        context: ./backend/processing_service
        push: true
        platforms: linux/amd64,linux/arm64
        tags: ${{ secrets.DOCKER_USERNAME }}/processing-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        platforms: linux/amd64,linux/arm64
        tags: ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-production:
    runs-on: [self-hosted, linux]
    needs: [build-images]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set Docker env to Minikube
      run: |
        minikube start
        eval $(minikube docker-env)
    
    - name: Deploy to Minikube
      run: |
        cd k8s
        ./k8s/deploy.sh
    
  notify:
    runs-on: [self-hosted, linux]
    needs: [deploy-production]
    if: always()
    continue-on-error: true

    steps:
    - name: Notify on success
      if: needs.deploy-production.result == 'success'
      run: echo "Deployment successful!"

    - name: Notify on failure
      if: needs.deploy-production.result == 'failure'
      run: echo "Deployment failed!"